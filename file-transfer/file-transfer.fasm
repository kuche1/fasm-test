
;; fasm file-transfer.fasm && chmod +x file-transfer && ./file-transfer

;; info
;;
;; registers:
;; rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13, r14 (and more)
;;
;; syscall args go to:
;; arg0(syscall-number)=rax arg1=rdi arg2=rsi arg3=rdx arg4=r10 arg5=r8 arg6=r9
;;
;; (hepefully all) syscall return to `rax`
;;
;; db - byte - 1 byte
;; dw - word - 2 bytes
;; dd - double word - 4 bytes
;; dq - quad word - 8 bytes
;;
;; rax is 64bits
;; eax is 32bits
;; for more info see https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture

;; debug tips
;;
;; omg you get NO SYMBOLS WTF
;; no `main`, no `_start`, nothing
;;
;; run with `strace`
;;
;; `readelf -e <file>` and find the `entry point address`
;; then in `gdb <file>` put a breakpoint on that address `b *0x4000b0`
;; then `run` and `tui enable` and `layout asm`
;; and you will get an asm view
;;
;; less retarded debugger is `gf` executable is called `gf2` https://github.com/nakst/gf
;; again, break on the entry point using `b *0x4000b0`
;; switch to the `registers` tab
;; start with `run`
;; use `ni` for next step

format ELF64 executable

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants

SYSCALL_WRITE equ 1
SYSCALL_SOCKET equ 41
SYSCALL_EXIT equ 60

FILE_STDIN equ 0
FILE_STDOUT equ 1
FILE_STDERR equ 2

RET_CODE_SUCC equ 0
RET_CODE_FAIL equ 1

SOCKET_DOMAIN_IPV4 equ 2
SOCKET_TYPE_TCP equ 1

;;;;;;;;;;;;;;;;;;;;;;;;; comptime variables

ASDFG = 1
ASDFG = ASDFG + 1

;;;;;;;;;;;;;;;;;;;;;;;;; macros

;;;;;;;;;;;;;; syscall macros

macro exit ret_code {
    mov rax, SYSCALL_EXIT
    mov rdi, ret_code
    syscall
}

macro socket domain, type, protocol {
    mov rax, SYSCALL_SOCKET
    mov rdi, domain
    mov rsi, type
    mov rdx, protocol
    syscall
}

macro write fd, msg, msg_len {
    mov rax, SYSCALL_WRITE
    mov rdi, fd
    mov rsi, msg
    mov rdx, msg_len
    syscall
}

;;;;;;;;;;;;;; other macros

macro print msg, msg_len {
    write FILE_STDOUT, msg, msg_len
    write FILE_STDOUT, str_nl, str_nl_len
}

;;;;;;;; user-defined macros

PORT = 8080

;;;;;;;;;;;;;;;;;;;;;;;;; code

segment readable executable

entry main
main:
    print str_starting_program, str_starting_program_len

    print str_creating_socket, str_creating_socket_len
    socket SOCKET_DOMAIN_IPV4, SOCKET_TYPE_TCP, 0 ;; only one TCP protocol exists so the last arguments stays at 0
    
    ;; check ret code
    cmp rax, 0
    jl error

    mov dword [sockfd], eax
    ;; TODO `dword` might not be necessary
    ;; but at least if you fuck up the sises fasm is going to warn you
    ;;
    ;; this has to be a pointer I guess

    exit RET_CODE_SUCC

error:
    exit RET_CODE_FAIL

;;;;;;;;;;;;;;;;;;;;;;;;; data

segment readable writable

;;;;;;;;;;;;;; "private" data

str_nl db 10 ;; new line character
str_nl_len = $ - str_nl

;;;;;;;;;;;;;; other data

str_starting_program db "starting program"
str_starting_program_len = $ - str_starting_program

str_creating_socket db "creating socket"
str_creating_socket_len = $ - str_creating_socket

sockfd dd 0
