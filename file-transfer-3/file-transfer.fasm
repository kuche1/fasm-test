
;; fasm file-transfer.fasm && chmod +x file-transfer && ./file-transfer

;; info
;;
;; registers:
;; rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13, r14 (and more)
;;
;; syscall args go to:
;; arg0(syscall-number)=rax arg1=rdi arg2=rsi arg3=rdx arg4=r10 arg5=r8 arg6=r9
;;
;; (hepefully all) syscall return to `rax`
;;
;; db - byte - 1 byte
;; dw - word - 2 bytes
;; dd - double word - 4 bytes
;; dq - quad word - 8 bytes
;;
;; rax is 64bits
;; eax is 32bits
;; for more info see https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture

;; debug tips
;;
;; omg you get NO SYMBOLS WTF
;; no `main`, no `_start`, nothing
;;
;; run with `strace`
;;
;; `readelf -e <file>` and find the `entry point address`
;; then in `gdb <file>` put a breakpoint on that address `b *0x4000b0`
;; then `run` and `tui enable` and `layout asm`
;; and you will get an asm view
;;
;; less retarded debugger is `gf` executable is called `gf2` https://github.com/nakst/gf
;; again, break on the entry point using `b *0x4000b0`
;; switch to the `registers` tab
;; start with `run`
;; use `ni` for next step

format ELF64 executable

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants: syscall ids

SYSCALL_WRITE equ 1
SYSCALL_CLOSE equ 3
SYSCALL_SOCKET equ 41
SYSCALL_ACCEPT equ 43
SYSCALL_BIND equ 49
SYSCALL_LISTEN equ 50
SYSCALL_EXIT equ 60

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants: files

FILE_STDIN equ 0
FILE_STDOUT equ 1
FILE_STDERR equ 2

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants: return codes

RET_CODE_SUCC equ 0
RET_CODE_FAIL equ 1
RET_CODE_TCP_SOCKET_FAIL equ 2
RET_CODE_BIND_FAIL equ 3
RET_CODE_LISTEN_FAIL equ 4
RET_CODE_ACCEPT_FAIL equ 5

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants: sockets

SOCKET_DOMAIN_IPV4 equ 2
SOCKET_TYPE_TCP equ 1

;;;;;;;;;;;;;;;;;;;;;;;;; comptime constants: server parameters

MAX_CONNECTIONS equ 5

;;;;;;;;;;;;;;;;;;;;;;;;; macros: syscalls: shorthands

macro syscall1 syscall_id, arg1 ;; TODO rename to `sys1`
{
    mov rax, syscall_id
    mov rdi, arg1
    syscall
}

macro syscall2 syscall_id, arg1, arg2
{
    mov rsi, arg2
    syscall1 syscall_id, arg1
}


macro syscall3 syscall_id, arg1, arg2, arg3
{
    mov rdx, arg3
    syscall2 syscall_id, arg1, arg2
}

;;;;;;;;;;;;;;;;;;;;;;;;; macros: syscalls: generic

macro sys_exit ret_code {
    syscall1 SYSCALL_EXIT, ret_code
}

macro sys_write fd, msg, msg_len {
    syscall3 SYSCALL_WRITE, fd, msg, msg_len
}

;;;;;;;;;;;;;;;;;;;;;;;;; macros: syscalls: networking

macro sys_accept sockfd, addr, addr_len {
    syscall3 SYSCALL_ACCEPT, sockfd, addr, addr_len
}

macro sys_bind sockfd, addr, addr_len {
    syscall3 SYSCALL_BIND, sockfd, addr, addr_len
}

macro sys_close fd {
    syscall1 SYSCALL_CLOSE, fd
}

macro sys_listen sockfd, max_connections {
    syscall2 SYSCALL_LISTEN, sockfd, max_connections
}

macro sys_socket domain, type, protocol {
    syscall3 SYSCALL_SOCKET, domain, type, protocol
}

;;;;;;;;;;;;;;;;;;;;;;;;; macros: other

macro print msg, msg_len {
    sys_write FILE_STDOUT, msg, msg_len
    sys_write FILE_STDOUT, str_nl, str_nl_len
}

macro create_tcp_socket {
;; returns: dword eax: sockfd
    sys_socket SOCKET_DOMAIN_IPV4, SOCKET_TYPE_TCP, 0 ;; only one TCP protocol exists so the last arguments stays at 0
    cmp rax, 0
    jge tcp_socket_ok
        sys_exit RET_CODE_TCP_SOCKET_FAIL
    tcp_socket_ok: ;; TODO try and use `$` or something similar so that the macro can be used more than once
}

;;;;;;;;;;;;;;;;;;;;;;;;; code section

segment readable executable

entry main
main:
    print str_starting_program, str_starting_program_len

    create_tcp_socket
    ;; returns: dword eax: sockfd

    mov qword [sockfd], rax

    ;; servaddr.sin_family = AF_INET;
    mov word [servaddr.sin_family], SOCKET_DOMAIN_IPV4

    ;; servaddr.sin_port = htons(PORT);
    ;;
    ;; convert endianness by hand
    ;; 6969 -(to-hex)-> 0x1b39 -(convert-endianness)-> 0x391b -(to-dec)-> 14619
    mov word [servaddr.sin_port], 14619

    ;; servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    ;; INADDR_ANY is 0 therefore I give 0 fucks about endianness
    mov dword [servaddr.sin_addr], 0

    sys_bind [sockfd], servaddr, servaddr.size
    cmp rax, 0
    jz bind_is_ok
        sys_exit RET_CODE_BIND_FAIL
    bind_is_ok:

    sys_listen [sockfd], MAX_CONNECTIONS
    cmp rax, 0
    jz listen_is_ok ;; ЛИСТЕН ЛИСТЕН
        sys_exit RET_CODE_LISTEN_FAIL
    listen_is_ok:

accept_next_client_loop:
    sys_accept [sockfd], cliaddr, cliaddr_size
    cmp rax, 0
    jg accept_is_ok
        sys_exit RET_CODE_ACCEPT_FAIL
    accept_is_ok:

    mov qword [connfd], rax

    sys_write [connfd], str_http_response, str_http_response_len

    sys_close [connfd]

    jmp accept_next_client_loop
    
    sys_close [sockfd] ;; TODO close on error as well; hint: who cares if you call close on a non-existing socket

    sys_exit RET_CODE_SUCC

;;;;;;;;;;;;;;;;;;;;;;;;; data section

segment readable writable

;;;;;;;;;;;;;; "private" data

str_nl db 10 ;; new line character
str_nl_len = $ - str_nl

;;;;;;;;;;;;;; other data

;;;;;;;; strings

str_starting_program db "starting program"
str_starting_program_len = $ - str_starting_program

;;str_creating_socket db "creating socket"
;;str_creating_socket_len = $ - str_creating_socket

;;str_hello db "hello", 10
;;str_hello_len = $ - str_hello

str_http_response db "HTTP/1.1 200 OK", 13, 10
                  db "Content-Type: text/html; charset=utf-8", 13, 10
                  db "Connection: close", 13, 10
                  db 13, 10
                  db "<h1>Hello from flat asm</h1>", 10
str_http_response_len = $ - str_http_response

;;;;;;;; other

;; struct sockaddr_in {
;;     sa_family_t    sin_family;  // 16 bits
;;     in_port_t      sin_port;    // 16 bits
;;     struct in_addr sin_addr;    // 32 bits
;;     uint8_t        sin_zero[8]; // 64 bits
;; }
;;
struc servaddr_in
{
    .sin_family dw 0
    .sin_port   dd 0
    .sin_addr   dd 0
    .sin_zero   dq 0
    .size = $ - .sin_family ;; this should be a comptime variable
}

sockfd dq -1

connfd dq -1

servaddr servaddr_in ;; OMT tova e kato `equ` i `=` (note that moje da dava6 parametri na taq struktura)

cliaddr servaddr_in
cliaddr_size dd servaddr.size
